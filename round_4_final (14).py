# -*- coding: utf-8 -*-
"""round_4_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ltMPxDfyXyCAGvl7DDGnksYmbxd2jgrk
"""

from datamodel import OrderDepth, UserId, TradingState, Order, ConversionObservation
from typing import List, Dict, Any
import string
import jsonpickle
import numpy as np
import math


class Product:
    RAINFOREST_RESIN = "RAINFOREST_RESIN" # --> Lucas
    KELP = "KELP" # Rajouter Squid_ink/Kelp ---> Lucas
    SQUID_INK = "SQUID_INK"
    MACARONS = "MAGNIFICENT_MACARONS" #augmenter le Pnl --> David
    GIFT_BASKET = "PICNIC_BASKET1" # Rajouter l'autre ETF --> David
    JAMS = "JAMS"
    CROISSANTS = "CROISSANTS" #intÃ©grer algo du sinus card du round3 et trader les trois assets --> Justin
    DJEMBES = "DJEMBES"
    SYNTHETIC = "SYNTHETIC"
    SPREAD = "SPREAD"
    VOLCANIC_ROCK = "VOLCANIC_ROCK" #rajouter d'autres options ? changer de strat --> Justin
    VOLCANIC_ROCK_COUPON = "VOLCANIC_ROCK_VOUCHER_10500"


PARAMS = {
    Product.RAINFOREST_RESIN: {
        "fair_value": 10000,
        "take_width": 1,
        "clear_width": 0.5,
        "volume_limit": 0,
    },
    Product.KELP: {
        "take_width": 1,
        "clear_width": 0,
        "prevent_adverse": True,
        "adverse_volume": 15,
        "reversion_beta": -0.229,
        "KELP_min_edge": 2,
    },
    Product.SQUID_INK: {
        "fair_value": 1852.7536166666666,
        "take_width": 1,
        "clear_width": 0.5,
        "volume_limit": 0,
    },
    Product.MACARONS: {
        "make_edge": 2,
        "make_min_edge": 1,
        "make_probability": 0.566,
        "init_make_edge": 2,
        "min_edge": 0.5,
        "volume_avg_timestamp": 30,
        "volume_bar": 40,  # Adjusted for position limit 75 vs 100 for ORCHIDS
        "dec_edge_discount": 0.8,
        "step_size": 0.5
    },
    Product.SPREAD: {
        "default_spread_mean": 10.792633333333333,
        "default_spread_std": 114.02122328925269,
        "spread_std_window": 20,
        "zscore_threshold": 7,
        "target_position": 50,
    },
    Product.VOLCANIC_ROCK_COUPON: {
        "mean_volatility":0.1165237671506021,
        "threshold": 0.13771167017112734,
        "strike": 10500,
        "starting_time_to_expiry": 3 / 7,
        "std_window": 5,
        "zscore_threshold": 20,
    },
    Product.CROISSANTS: {
        "take_width": 1.5,
        "clear_width": 1.0,
        "mean_reversion_strength": -0.6,
        "history_window": 20,
        "sinc_peak_threshold": 0.5,
        "sinc_center": 10000,
        "sinc_width": 750,
        "position_limit": 40,
        "buy_threshold": 0.3,
        "sell_threshold": 0.2,
        "max_spread": 10,
    },
    Product.JAMS: {
        "take_width": 1.5,
        "clear_width": 1.0,
        "mean_reversion_strength": -0.6,
        "history_window": 20,
        "sinc_peak_threshold": 0.5,
        "sinc_center": 10000,
        "sinc_width": 750,
        "position_limit": 40,
        "buy_threshold": 0.3,
        "sell_threshold": 0.2,
        "max_spread": 10,
    }
}

BASKET_WEIGHTS = {
    Product.JAMS: 3,
    Product.CROISSANTS: 6,
    Product.DJEMBES: 1,
}



from math import log, sqrt, exp
from statistics import NormalDist


class BlackScholes:
    @staticmethod
    def black_scholes_call(spot, strike, time_to_expiry, volatility):
        d1 = (
            log(spot) - log(strike) + (0.5 * volatility * volatility) * time_to_expiry
        ) / (volatility * sqrt(time_to_expiry))
        d2 = d1 - volatility * sqrt(time_to_expiry)
        call_price = spot * NormalDist().cdf(d1) - strike * NormalDist().cdf(d2)
        return call_price

    @staticmethod
    def black_scholes_put(spot, strike, time_to_expiry, volatility):
        d1 = (log(spot / strike) + (0.5 * volatility * volatility) * time_to_expiry) / (
            volatility * sqrt(time_to_expiry)
        )
        d2 = d1 - volatility * sqrt(time_to_expiry)
        put_price = strike * NormalDist().cdf(-d2) - spot * NormalDist().cdf(-d1)
        return put_price

    @staticmethod
    def delta(spot, strike, time_to_expiry, volatility):
        d1 = (
            log(spot) - log(strike) + (0.5 * volatility * volatility) * time_to_expiry
        ) / (volatility * sqrt(time_to_expiry))
        return NormalDist().cdf(d1)

    @staticmethod
    def gamma(spot, strike, time_to_expiry, volatility):
        d1 = (
            log(spot) - log(strike) + (0.5 * volatility * volatility) * time_to_expiry
        ) / (volatility * sqrt(time_to_expiry))
        return NormalDist().pdf(d1) / (spot * volatility * sqrt(time_to_expiry))

    @staticmethod
    def vega(spot, strike, time_to_expiry, volatility):
        d1 = (
            log(spot) - log(strike) + (0.5 * volatility * volatility) * time_to_expiry
        ) / (volatility * sqrt(time_to_expiry))
        # print(f"d1: {d1}")
        # print(f"vol: {volatility}")
        # print(f"spot: {spot}")
        # print(f"strike: {strike}")
        # print(f"time: {time_to_expiry}")
        return NormalDist().pdf(d1) * (spot * sqrt(time_to_expiry)) / 100

    @staticmethod
    def implied_volatility(
        call_price, spot, strike, time_to_expiry, max_iterations=200, tolerance=1e-10
    ):
        low_vol = 0.01
        high_vol = 1.0
        volatility = (low_vol + high_vol) / 2.0  # Initial guess as the midpoint
        for _ in range(max_iterations):
            estimated_price = BlackScholes.black_scholes_call(
                spot, strike, time_to_expiry, volatility
            )
            diff = estimated_price - call_price
            if abs(diff) < tolerance:
                break
            elif diff > 0:
                high_vol = volatility
            else:
                low_vol = volatility
            volatility = (low_vol + high_vol) / 2.0
        return volatility


class Trader:
    def __init__(self, params=None):
        if params is None:
            params = PARAMS
        self.params = params

        self.LIMIT = {
            Product.RAINFOREST_RESIN: 50,
            Product.KELP: 50,
            Product.SQUID_INK : 50,
            Product.MACARONS: 75,
            Product.GIFT_BASKET: 50,
            Product.JAMS: 50,
            Product.CROISSANTS: 50,
            Product.DJEMBES: 50,
            Product.VOLCANIC_ROCK: 50,
            Product.VOLCANIC_ROCK_COUPON: 50,
        }
        self.CONVERSION_LIMIT = {Product.MACARONS: 10}

    def macarons_implied_bid_ask(self, observation: ConversionObservation) -> (float, float):
        # Implied prices based on external factors (similar to ORCHIDS)
        return (
            observation.bidPrice - observation.exportTariff - observation.transportFees - 0.1,
            observation.askPrice + observation.importTariff + observation.transportFees
        )

    def macarons_adap_edge(
        self,
        timestamp: int,
        curr_edge: float,
        position: int,
        traderObject: dict
    ) -> float:
        if timestamp == 0:
            traderObject[Product.MACARONS]["curr_edge"] = self.params[Product.MACARONS]["init_make_edge"]
            return self.params[Product.MACARONS]["init_make_edge"]

        traderObject[Product.MACARONS]["volume_history"].append(abs(position))
        if len(traderObject[Product.MACARONS]["volume_history"]) > self.params[Product.MACARONS]["volume_avg_timestamp"]:
            traderObject[Product.MACARONS]["volume_history"].pop(0)

        if len(traderObject[Product.MACARONS]["volume_history"]) < self.params[Product.MACARONS]["volume_avg_timestamp"]:
            return curr_edge
        elif not traderObject[Product.MACARONS]["optimized"]:
            volume_avg = np.mean(traderObject[Product.MACARONS]["volume_history"])

            if volume_avg >= self.params[Product.MACARONS]["volume_bar"]:
                traderObject[Product.MACARONS]["volume_history"] = []
                traderObject[Product.MACARONS]["curr_edge"] = curr_edge + self.params[Product.MACARONS]["step_size"]
                return curr_edge + self.params[Product.MACARONS]["step_size"]

            elif self.params[Product.MACARONS]["dec_edge_discount"] * self.params[Product.MACARONS]["volume_bar"] * (curr_edge - self.params[Product.MACARONS]["step_size"]) > volume_avg * curr_edge:
                if curr_edge - self.params[Product.MACARONS]["step_size"] > self.params[Product.MACARONS]["min_edge"]:
                    traderObject[Product.MACARONS]["volume_history"] = []
                    traderObject[Product.MACARONS]["curr_edge"] = curr_edge - self.params[Product.MACARONS]["step_size"]
                    traderObject[Product.MACARONS]["optimized"] = True
                    return curr_edge - self.params[Product.MACARONS]["step_size"]
                else:
                    traderObject[Product.MACARONS]["curr_edge"] = self.params[Product.MACARONS]["min_edge"]
                    return self.params[Product.MACARONS]["min_edge"]

        traderObject[Product.MACARONS]["curr_edge"] = curr_edge
        return curr_edge

    def macarons_arb_take(
        self,
        order_depth: OrderDepth,
        observation: ConversionObservation,
        adap_edge: float,
        position: int
    ) -> (List[Order], int, int):
        orders: List[Order] = []
        position_limit = self.LIMIT[Product.MACARONS]
        buy_order_volume = 0
        sell_order_volume = 0

        implied_bid, implied_ask = self.macarons_implied_bid_ask(observation)

        buy_quantity = position_limit - position
        sell_quantity = position_limit + position

        ask = implied_ask + adap_edge

        foreign_mid = (observation.askPrice + observation.bidPrice) / 2
        aggressive_ask = foreign_mid - 1.6

        if aggressive_ask > implied_ask:
            ask = aggressive_ask

        edge = (ask - implied_ask) * self.params[Product.MACARONS]["make_probability"]

        for price in sorted(list(order_depth.sell_orders.keys())):
            if price > implied_bid - edge:
                break
            if price < implied_bid - edge:
                quantity = min(abs(order_depth.sell_orders[price]), buy_quantity)
                if quantity > 0:
                    orders.append(Order(Product.MACARONS, round(price), quantity))
                    buy_order_volume += quantity

        for price in sorted(list(order_depth.buy_orders.keys()), reverse=True):
            if price < implied_ask + edge:
                break
            if price > implied_ask + edge:
                quantity = min(abs(order_depth.buy_orders[price]), sell_quantity)
                if quantity > 0:
                    orders.append(Order(Product.MACARONS, round(price), -quantity))
                    sell_order_volume += quantity

        return orders, buy_order_volume, sell_order_volume

    def macarons_arb_clear(self, position: int) -> int:
        conversion_limit = self.CONVERSION_LIMIT[Product.MACARONS]
        conversions = max(min(-position, conversion_limit), -conversion_limit)
        return conversions

    def macarons_arb_make(
        self,
        order_depth: OrderDepth,
        observation: ConversionObservation,
        position: int,
        edge: float,
        buy_order_volume: int,
        sell_order_volume: int,
    ) -> (List[Order], int, int):
        orders: List[Order] = []
        position_limit = self.LIMIT[Product.MACARONS]

        implied_bid, implied_ask = self.macarons_implied_bid_ask(observation)

        bid = implied_bid - edge
        ask = implied_ask + edge

        foreign_mid = (observation.askPrice + observation.bidPrice) / 2
        aggressive_ask = foreign_mid - 1.6

        if aggressive_ask >= implied_ask + self.params[Product.MACARONS]["min_edge"]:
            ask = aggressive_ask

        filtered_ask = [price for price in order_depth.sell_orders.keys() if abs(order_depth.sell_orders[price]) >= 30]
        filtered_bid = [price for price in order_depth.buy_orders.keys() if abs(order_depth.buy_orders[price]) >= 20]

        if len(filtered_ask) > 0 and ask > filtered_ask[0]:
            if filtered_ask[0] - 1 > implied_ask:
                ask = filtered_ask[0] - 1
            else:
                ask = implied_ask + edge
        if len(filtered_bid) > 0 and bid < filtered_bid[0]:
            if filtered_bid[0] + 1 < implied_bid:
                bid = filtered_bid[0] + 1
            else:
                bid = implied_bid - edge

        buy_quantity = position_limit - (position + buy_order_volume)
        if buy_quantity > 0:
            orders.append(Order(Product.MACARONS, round(bid), buy_quantity))

        sell_quantity = position_limit + (position - sell_order_volume)
        if sell_quantity > 0:
            orders.append(Order(Product.MACARONS, round(ask), -sell_quantity))

        return orders, buy_order_volume, sell_order_volume

    def SQUID_INK_fair_value(self, order_depth: OrderDepth, traderObject) -> float:
        if len(order_depth.sell_orders) != 0 and len(order_depth.buy_orders) != 0:
            best_ask = min(order_depth.sell_orders.keys())
            best_bid = max(order_depth.buy_orders.keys())
            filtered_ask = [
                price
                for price in order_depth.sell_orders.keys()
                if abs(order_depth.sell_orders[price])
                >= self.params[Product.SQUID_INK]["adverse_volume"]
            ]
            filtered_bid = [
                price
                for price in order_depth.buy_orders.keys()
                if abs(order_depth.buy_orders[price])
                >= self.params[Product.SQUID_INK]["adverse_volume"]
            ]
            mm_ask = min(filtered_ask) if len(filtered_ask) > 0 else None
            mm_bid = max(filtered_bid) if len(filtered_bid) > 0 else None
            if mm_ask == None or mm_bid == None:
                if traderObject.get("SQUID_INK_last_price", None) == None:
                    mmmid_price = (best_ask + best_bid) / 2
                else:
                    mmmid_price = traderObject["SQUID_INK_last_price"]
            else:
                mmmid_price = (mm_ask + mm_bid) / 2

            if traderObject.get("SQUID_INK_last_price", None) != None:
                last_price = traderObject["SQUID_INK_last_price"]
                last_returns = (mmmid_price - last_price) / last_price
                pred_returns = (
                    last_returns * self.params[Product.SQUID_INK]["reversion_beta"]
                )
                fair = mmmid_price + (mmmid_price * pred_returns)
            else:
                fair = mmmid_price
            traderObject["SQUID_INK_last_price"] = mmmid_price
            return fair
        return None


    def sinc_fair_value(self, product: str, order_depth: OrderDepth, traderObject) -> float:
        """
        Calculate fair value for products using sinc function density model and negative autocorrelation
        (Used for CROISSANTS and JAMS)
        """
        price_history_key = f"{product}_price_history"
        if price_history_key not in traderObject:
            traderObject[price_history_key] = []

        if len(order_depth.sell_orders) != 0 and len(order_depth.buy_orders) != 0:
            best_ask = min(order_depth.sell_orders.keys())
            best_bid = max(order_depth.buy_orders.keys())
            mid_price = (best_ask + best_bid) / 2

            traderObject[price_history_key].append(mid_price)

            history_window = self.params[product]["history_window"]
            if len(traderObject[price_history_key]) > history_window:
                traderObject[price_history_key] = traderObject[price_history_key][-history_window:]

            if len(traderObject[price_history_key]) > 1:
                last_price = traderObject[price_history_key][-2]
                current_price = traderObject[price_history_key][-1]

                center = self.params[product]["sinc_center"]
                deviation = current_price - center

                sinc_width = self.params[product]["sinc_width"]
                if deviation == 0:
                    sinc_value = 1.0
                else:
                    x = deviation / sinc_width
                    sinc_value = np.sin(np.pi * x) / (np.pi * x) if x != 0 else 1.0

                traderObject[f"{product}_sinc_value"] = sinc_value

                mean_reversion_strength = self.params[product]["mean_reversion_strength"]
                price_change = current_price - last_price
                predicted_change = price_change * mean_reversion_strength
                fair_value = current_price + predicted_change

                traderObject[f"{product}_predicted_direction"] = np.sign(predicted_change)

                return fair_value

            return mid_price

        return None

    def sinc_zero_crossings(self, x):
        """Calculate approximate zero crossings of the sinc function"""
        return [n for n in range(1, 10)]

    def sinc_mean_reversion_strategy(
        self,
        product: str,
        order_depth: OrderDepth,
        traderObject,
        position: int
    ) -> List[Order]:
        """Implement mean reversion strategy based on sinc function for specified product"""
        orders = []

        if len(order_depth.sell_orders) == 0 or len(order_depth.buy_orders) == 0:
            return orders

        best_ask = min(order_depth.sell_orders.keys())
        best_bid = max(order_depth.buy_orders.keys())
        current_spread = best_ask - best_bid

        sinc_value = traderObject.get(f"{product}_sinc_value", 0)
        predicted_direction = traderObject.get(f"{product}_predicted_direction", 0)

        center = self.params[product]["sinc_center"]
        current_price = traderObject[f"{product}_price_history"][-1]

        buy_threshold = self.params[product]["buy_threshold"]
        sell_threshold = self.params[product]["sell_threshold"]
        position_limit = self.params[product]["position_limit"]

        deviation = current_price - center
        sinc_width = self.params[product]["sinc_width"]
        normalized_deviation = deviation / sinc_width

        zero_crossings = self.sinc_zero_crossings(normalized_deviation)
        distances = [abs(normalized_deviation - zc) for zc in zero_crossings] + [abs(normalized_deviation + zc) for zc in zero_crossings]
        nearest_zero_distance = min(distances) if distances else float('inf')

        buy_quantity = position_limit - position
        sell_quantity = position_limit + position

        if abs(sinc_value) > buy_threshold and predicted_direction > 0 and position < position_limit:
            price = best_bid + 1
            if buy_quantity > 0:
                orders.append(Order(product, price, buy_quantity))
        elif abs(sinc_value) < sell_threshold or predicted_direction < 0:
            price = best_bid - 1 if position > 0 else best_ask - 1
            if sell_quantity > 0:
                orders.append(Order(product, price, -sell_quantity))
        else:
            max_spread = self.params[product]["max_spread"]
            mid_price = (best_ask + best_bid) / 2
            spread_factor = 1 - abs(sinc_value) / 2
            spread = max(1, min(max_spread, current_spread) * spread_factor)
            ask = round(mid_price + spread / 2)
            bid = round(mid_price - spread / 2)
            if buy_quantity > 0:
                orders.append(Order(product, bid, buy_quantity))
            if sell_quantity > 0:
                orders.append(Order(product, ask, -sell_quantity))

        return orders

    # Returns buy_order_volume, sell_order_volume
    def take_best_orders(
        self,
        product: str,
        fair_value: int,
        take_width: float,
        orders: List[Order],
        order_depth: OrderDepth,
        position: int,
        buy_order_volume: int,
        sell_order_volume: int,
        prevent_adverse: bool = False,
        adverse_volume: int = 0,
    ) -> (int, int):
        position_limit = self.LIMIT[product]
        if len(order_depth.sell_orders) != 0:
            best_ask = min(order_depth.sell_orders.keys())
            best_ask_amount = -1 * order_depth.sell_orders[best_ask]

            if best_ask <= fair_value - take_width:
                quantity = min(
                    best_ask_amount, position_limit - position
                )  # max amt to buy
                if quantity > 0:
                    orders.append(Order(product, best_ask, quantity))
                    buy_order_volume += quantity
                    order_depth.sell_orders[best_ask] += quantity
                    if order_depth.sell_orders[best_ask] == 0:
                        del order_depth.sell_orders[best_ask]

        if len(order_depth.buy_orders) != 0:
            best_bid = max(order_depth.buy_orders.keys())
            best_bid_amount = order_depth.buy_orders[best_bid]
            if best_bid >= fair_value + take_width:
                quantity = min(
                    best_bid_amount, position_limit + position
                )  # should be the max we can sell
                if quantity > 0:
                    orders.append(Order(product, best_bid, -1 * quantity))
                    sell_order_volume += quantity
                    order_depth.buy_orders[best_bid] -= quantity
                    if order_depth.buy_orders[best_bid] == 0:
                        del order_depth.buy_orders[best_bid]
        return buy_order_volume, sell_order_volume

    def take_best_orders_with_adverse(
        self,
        product: str,
        fair_value: int,
        take_width: float,
        orders: List[Order],
        order_depth: OrderDepth,
        position: int,
        buy_order_volume: int,
        sell_order_volume: int,
        adverse_volume: int,
    ) -> (int, int):

        position_limit = self.LIMIT[product]
        if len(order_depth.sell_orders) != 0:
            best_ask = min(order_depth.sell_orders.keys())
            best_ask_amount = -1 * order_depth.sell_orders[best_ask]
            if abs(best_ask_amount) <= adverse_volume:
                if best_ask <= fair_value - take_width:
                    quantity = min(
                        best_ask_amount, position_limit - position
                    )  # max amt to buy
                    if quantity > 0:
                        orders.append(Order(product, best_ask, quantity))
                        buy_order_volume += quantity
                        order_depth.sell_orders[best_ask] += quantity
                        if order_depth.sell_orders[best_ask] == 0:
                            del order_depth.sell_orders[best_ask]

        if len(order_depth.buy_orders) != 0:
            best_bid = max(order_depth.buy_orders.keys())
            best_bid_amount = order_depth.buy_orders[best_bid]
            if abs(best_bid_amount) <= adverse_volume:
                if best_bid >= fair_value + take_width:
                    quantity = min(
                        best_bid_amount, position_limit + position
                    )  # should be the max we can sell
                    if quantity > 0:
                        orders.append(Order(product, best_bid, -1 * quantity))
                        sell_order_volume += quantity
                        order_depth.buy_orders[best_bid] -= quantity
                        if order_depth.buy_orders[best_bid] == 0:
                            del order_depth.buy_orders[best_bid]

        return buy_order_volume, sell_order_volume

    def market_make(
        self,
        product: str,
        orders: List[Order],
        bid: int,
        ask: int,
        position: int,
        buy_order_volume: int,
        sell_order_volume: int,
    ) -> (int, int):
        buy_quantity = self.LIMIT[product] - (position + buy_order_volume)
        if buy_quantity > 0:
            orders.append(Order(product, round(bid), buy_quantity))  # Buy order

        sell_quantity = self.LIMIT[product] + (position - sell_order_volume)
        if sell_quantity > 0:
            orders.append(Order(product, round(ask), -sell_quantity))  # Sell order
        return buy_order_volume, sell_order_volume

    def make_orders(
        self,
        product,
        order_depth: OrderDepth,
        fair_value: float,
        position: int,
        buy_order_volume: int,
        sell_order_volume: int,
        disregard_edge: float,
        join_edge: float,
        default_edge: float,
        manage_position: bool = False,
        soft_position_limit: int = 0,
    ):
        orders: List[Order] = []
        asks_above_fair = [
            price
            for price in order_depth.sell_orders.keys()
            if price > fair_value + disregard_edge
        ]
        bids_below_fair = [
            price
            for price in order_depth.buy_orders.keys()
            if price < fair_value - disregard_edge
        ]

        best_ask_above_fair = min(asks_above_fair) if len(asks_above_fair) > 0 else None
        best_bid_below_fair = max(bids_below_fair) if len(bids_below_fair) > 0 else None

        ask = round(fair_value + default_edge)
        if best_ask_above_fair != None:
            if abs(best_ask_above_fair - fair_value) <= join_edge:
                ask = best_ask_above_fair
            else:
                ask = best_ask_above_fair - 1

        bid = round(fair_value - default_edge)
        if best_bid_below_fair != None:
            if abs(fair_value - best_bid_below_fair) <= join_edge:
                bid = best_bid_below_fair
            else:
                bid = best_bid_below_fair + 1

        if manage_position:
            if position > soft_position_limit:
                ask -= 1
            elif position < -1 * soft_position_limit:
                bid += 1

        buy_order_volume, sell_order_volume = self.market_make(
            product,
            orders,
            bid,
            ask,
            position,
            buy_order_volume,
            sell_order_volume,
        )

        return orders, buy_order_volume, sell_order_volume

    def clear_position_order(
        self,
        product: str,
        fair_value: float,
        width: int,
        orders: List[Order],
        order_depth: OrderDepth,
        position: int,
        buy_order_volume: int,
        sell_order_volume: int,
    ) -> List[Order]:
        position_after_take = position + buy_order_volume - sell_order_volume
        fair_for_bid = round(fair_value - width)
        fair_for_ask = round(fair_value + width)

        buy_quantity = self.LIMIT[product] - (position + buy_order_volume)
        sell_quantity = self.LIMIT[product] + (position - sell_order_volume)

        if position_after_take > 0:
            # Aggregate volume from all buy orders with price greater than fair_for_ask
            clear_quantity = sum(
                volume
                for price, volume in order_depth.buy_orders.items()
                if price >= fair_for_ask
            )
            clear_quantity = min(clear_quantity, position_after_take)
            sent_quantity = min(sell_quantity, clear_quantity)
            if sent_quantity > 0:
                orders.append(Order(product, fair_for_ask, -abs(sent_quantity)))
                sell_order_volume += abs(sent_quantity)

        if position_after_take < 0:
            # Aggregate volume from all sell orders with price lower than fair_for_bid
            clear_quantity = sum(
                abs(volume)
                for price, volume in order_depth.sell_orders.items()
                if price <= fair_for_bid
            )
            clear_quantity = min(clear_quantity, abs(position_after_take))
            sent_quantity = min(buy_quantity, clear_quantity)
            if sent_quantity > 0:
                orders.append(Order(product, fair_for_bid, abs(sent_quantity)))
                buy_order_volume += abs(sent_quantity)

        return buy_order_volume, sell_order_volume

    def KELP_fair_value(self, order_depth: OrderDepth, traderObject) -> float:
        if len(order_depth.sell_orders) != 0 and len(order_depth.buy_orders) != 0:
            best_ask = min(order_depth.sell_orders.keys())
            best_bid = max(order_depth.buy_orders.keys())
            filtered_ask = [
                price
                for price in order_depth.sell_orders.keys()
                if abs(order_depth.sell_orders[price])
                >= self.params[Product.KELP]["adverse_volume"]
            ]
            filtered_bid = [
                price
                for price in order_depth.buy_orders.keys()
                if abs(order_depth.buy_orders[price])
                >= self.params[Product.KELP]["adverse_volume"]
            ]
            mm_ask = min(filtered_ask) if len(filtered_ask) > 0 else None
            mm_bid = max(filtered_bid) if len(filtered_bid) > 0 else None
            if mm_ask == None or mm_bid == None:
                if traderObject.get("KELP_last_price", None) == None:
                    mmmid_price = (best_ask + best_bid) / 2
                else:
                    mmmid_price = traderObject["KELP_last_price"]
            else:
                mmmid_price = (mm_ask + mm_bid) / 2

            if traderObject.get("KELP_last_price", None) != None:
                last_price = traderObject["KELP_last_price"]
                last_returns = (mmmid_price - last_price) / last_price
                pred_returns = (
                    last_returns * self.params[Product.KELP]["reversion_beta"]
                )
                fair = mmmid_price + (mmmid_price * pred_returns)
            else:
                fair = mmmid_price
            traderObject["KELP_last_price"] = mmmid_price
            return fair
        return None

    def make_amethyst_orders(
        self,
        order_depth: OrderDepth,
        fair_value: int,
        position: int,
        buy_order_volume: int,
        sell_order_volume: int,
        volume_limit: int,
    ) -> (List[Order], int, int):
        orders: List[Order] = []
        baaf = min(
            [
                price
                for price in order_depth.sell_orders.keys()
                if price > fair_value + 1
            ]
        )
        bbbf = max(
            [price for price in order_depth.buy_orders.keys() if price < fair_value - 1]
        )

        if baaf <= fair_value + 2:
            if position <= volume_limit:
                baaf = fair_value + 3  # still want edge 2 if position is not a concern

        if bbbf >= fair_value - 2:
            if position >= -volume_limit:
                bbbf = fair_value - 3  # still want edge 2 if position is not a concern

        buy_order_volume, sell_order_volume = self.market_make(
            Product.RAINFOREST_RESIN,
            orders,
            bbbf + 1,
            baaf - 1,
            position,
            buy_order_volume,
            sell_order_volume,
        )
        return orders, buy_order_volume, sell_order_volume

    def make_squid_orders(
        self,
        order_depth: OrderDepth,
        fair_value: int,
        position: int,
        buy_order_volume: int,
        sell_order_volume: int,
        volume_limit: int,
    ) -> (List[Order], int, int):
        orders: List[Order] = []
        # Calculate baaf with a fallback if no valid ask prices are found
        ask_prices_above_fair = [
            price
            for price in order_depth.sell_orders.keys()
            if price > fair_value + 1
        ]
        baaf = min(ask_prices_above_fair) if ask_prices_above_fair else fair_value + 3

        # Calculate bbbf with a fallback if no valid bid prices are found
        bid_prices_below_fair = [
            price
            for price in order_depth.buy_orders.keys()
            if price < fair_value - 1
        ]
        bbbf = max(bid_prices_below_fair) if bid_prices_below_fair else fair_value - 3

        # Adjust baaf based on position and volume limit
        if baaf <= fair_value + 2:
            if position <= volume_limit:
                baaf = fair_value + 3  # Still want edge 2 if position is not a concern

        # Adjust bbbf based on position and volume limit
        if bbbf >= fair_value - 2:
            if position >= -volume_limit:
                bbbf = fair_value - 3  # Still want edge 2 if position is not a concern

        buy_order_volume, sell_order_volume = self.market_make(
            Product.SQUID_INK,
            orders,
            bbbf + 1,
            baaf - 1,
            position,
            buy_order_volume,
            sell_order_volume,
        )
        return orders, buy_order_volume, sell_order_volume

    def take_orders(
        self,
        product: str,
        order_depth: OrderDepth,
        fair_value: float,
        take_width: float,
        position: int,
        prevent_adverse: bool = False,
        adverse_volume: int = 0,
    ) -> (List[Order], int, int):
        orders: List[Order] = []
        buy_order_volume = 0
        sell_order_volume = 0

        if prevent_adverse:
            buy_order_volume, sell_order_volume = self.take_best_orders_with_adverse(
                product,
                fair_value,
                take_width,
                orders,
                order_depth,
                position,
                buy_order_volume,
                sell_order_volume,
                adverse_volume,
            )
        else:
            buy_order_volume, sell_order_volume = self.take_best_orders(
                product,
                fair_value,
                take_width,
                orders,
                order_depth,
                position,
                buy_order_volume,
                sell_order_volume,
            )
        return orders, buy_order_volume, sell_order_volume

    def clear_orders(
        self,
        product: str,
        order_depth: OrderDepth,
        fair_value: float,
        clear_width: int,
        position: int,
        buy_order_volume: int,
        sell_order_volume: int,
    ) -> (List[Order], int, int):
        orders: List[Order] = []
        buy_order_volume, sell_order_volume = self.clear_position_order(
            product,
            fair_value,
            clear_width,
            orders,
            order_depth,
            position,
            buy_order_volume,
            sell_order_volume,
        )
        return orders, buy_order_volume, sell_order_volume

    def make_KELP_orders(
        self,
        order_depth: OrderDepth,
        fair_value: float,
        min_edge: float,
        position: int,
        buy_order_volume: int,
        sell_order_volume: int,
    ) -> (List[Order], int, int):
        orders: List[Order] = []
        aaf = [
            price
            for price in order_depth.sell_orders.keys()
            if price >= round(fair_value + min_edge)
        ]
        bbf = [
            price
            for price in order_depth.buy_orders.keys()
            if price <= round(fair_value - min_edge)
        ]
        baaf = min(aaf) if len(aaf) > 0 else round(fair_value + min_edge)
        bbbf = max(bbf) if len(bbf) > 0 else round(fair_value - min_edge)
        buy_order_volume, sell_order_volume = self.market_make(
            Product.KELP,
            orders,
            bbbf + 1,
            baaf - 1,
            position,
            buy_order_volume,
            sell_order_volume,
        )

        return orders, buy_order_volume, sell_order_volume



    def get_swmid(self, order_depth) -> float:
        best_bid = max(order_depth.buy_orders.keys())
        best_ask = min(order_depth.sell_orders.keys())
        best_bid_vol = abs(order_depth.buy_orders[best_bid])
        best_ask_vol = abs(order_depth.sell_orders[best_ask])
        return (best_bid * best_ask_vol + best_ask * best_bid_vol) / (
            best_bid_vol + best_ask_vol
        )

    def get_synthetic_basket_order_depth(
        self, order_depths: Dict[str, OrderDepth]
    ) -> OrderDepth:
        # Constants
        JAMS_PER_BASKET = BASKET_WEIGHTS[Product.JAMS]
        CROISSANTS_PER_BASKET = BASKET_WEIGHTS[Product.CROISSANTS]
        DJEMBES_PER_BASKET = BASKET_WEIGHTS[Product.DJEMBES]

        # Initialize the synthetic basket order depth
        synthetic_order_price = OrderDepth()

        # Calculate the best bid and ask for each component
        JAMS_best_bid = (
            max(order_depths[Product.JAMS].buy_orders.keys())
            if order_depths[Product.JAMS].buy_orders
            else 0
        )
        JAMS_best_ask = (
            min(order_depths[Product.JAMS].sell_orders.keys())
            if order_depths[Product.JAMS].sell_orders
            else float("inf")
        )
        CROISSANTS_best_bid = (
            max(order_depths[Product.CROISSANTS].buy_orders.keys())
            if order_depths[Product.CROISSANTS].buy_orders
            else 0
        )
        CROISSANTS_best_ask = (
            min(order_depths[Product.CROISSANTS].sell_orders.keys())
            if order_depths[Product.CROISSANTS].sell_orders
            else float("inf")
        )
        DJEMBES_best_bid = (
            max(order_depths[Product.DJEMBES].buy_orders.keys())
            if order_depths[Product.DJEMBES].buy_orders
            else 0
        )
        DJEMBES_best_ask = (
            min(order_depths[Product.DJEMBES].sell_orders.keys())
            if order_depths[Product.DJEMBES].sell_orders
            else float("inf")
        )

        # Calculate the implied bid and ask for the synthetic basket
        implied_bid = (
            JAMS_best_bid * JAMS_PER_BASKET
            + CROISSANTS_best_bid * CROISSANTS_PER_BASKET
            + DJEMBES_best_bid * DJEMBES_PER_BASKET
        )
        implied_ask = (
            JAMS_best_ask * JAMS_PER_BASKET
            + CROISSANTS_best_ask * CROISSANTS_PER_BASKET
            + DJEMBES_best_ask * DJEMBES_PER_BASKET
        )

        # Calculate the maximum number of synthetic baskets available at the implied bid and ask
        if implied_bid > 0:
            JAMS_bid_volume = (
                order_depths[Product.JAMS].buy_orders[JAMS_best_bid]
                // JAMS_PER_BASKET
            )
            CROISSANTS_bid_volume = (
                order_depths[Product.CROISSANTS].buy_orders[CROISSANTS_best_bid]
                // CROISSANTS_PER_BASKET
            )
            DJEMBES_bid_volume = (
                order_depths[Product.DJEMBES].buy_orders[DJEMBES_best_bid]
                // DJEMBES_PER_BASKET
            )
            implied_bid_volume = min(
                JAMS_bid_volume, CROISSANTS_bid_volume, DJEMBES_bid_volume
            )
            synthetic_order_price.buy_orders[implied_bid] = implied_bid_volume

        if implied_ask < float("inf"):
            JAMS_ask_volume = (
                -order_depths[Product.JAMS].sell_orders[JAMS_best_ask]
                // JAMS_PER_BASKET
            )
            CROISSANTS_ask_volume = (
                -order_depths[Product.CROISSANTS].sell_orders[CROISSANTS_best_ask]
                // CROISSANTS_PER_BASKET
            )
            DJEMBES_ask_volume = (
                -order_depths[Product.DJEMBES].sell_orders[DJEMBES_best_ask]
                // DJEMBES_PER_BASKET
            )
            implied_ask_volume = min(
                JAMS_ask_volume, CROISSANTS_ask_volume, DJEMBES_ask_volume
            )
            synthetic_order_price.sell_orders[implied_ask] = -implied_ask_volume

        return synthetic_order_price

    def convert_synthetic_basket_orders(
        self, synthetic_orders: List[Order], order_depths: Dict[str, OrderDepth]
    ) -> Dict[str, List[Order]]:
        # Initialize the dictionary to store component orders
        component_orders = {
            Product.JAMS: [],
            Product.CROISSANTS: [],
            Product.DJEMBES: [],
        }

        # Get the best bid and ask for the synthetic basket
        synthetic_basket_order_depth = self.get_synthetic_basket_order_depth(
            order_depths
        )
        best_bid = (
            max(synthetic_basket_order_depth.buy_orders.keys())
            if synthetic_basket_order_depth.buy_orders
            else 0
        )
        best_ask = (
            min(synthetic_basket_order_depth.sell_orders.keys())
            if synthetic_basket_order_depth.sell_orders
            else float("inf")
        )

        # Iterate through each synthetic basket order
        for order in synthetic_orders:
            # Extract the price and quantity from the synthetic basket order
            price = order.price
            quantity = order.quantity

            # Check if the synthetic basket order aligns with the best bid or ask
            if quantity > 0 and price >= best_ask:
                # Buy order - trade components at their best ask prices
                JAMS_price = min(
                    order_depths[Product.JAMS].sell_orders.keys()
                )
                CROISSANTS_price = min(
                    order_depths[Product.CROISSANTS].sell_orders.keys()
                )
                DJEMBES_price = min(order_depths[Product.DJEMBES].sell_orders.keys())
            elif quantity < 0 and price <= best_bid:
                # Sell order - trade components at their best bid prices
                JAMS_price = max(order_depths[Product.JAMS].buy_orders.keys())
                CROISSANTS_price = max(
                    order_depths[Product.CROISSANTS].buy_orders.keys()
                )
                DJEMBES_price = max(order_depths[Product.DJEMBES].buy_orders.keys())
            else:
                # The synthetic basket order does not align with the best bid or ask
                continue

            # Create orders for each component
            JAMS_order = Order(
                Product.JAMS,
                JAMS_price,
                quantity * BASKET_WEIGHTS[Product.JAMS],
            )
            CROISSANTS_order = Order(
                Product.CROISSANTS,
                CROISSANTS_price,
                quantity * BASKET_WEIGHTS[Product.CROISSANTS],
            )
            DJEMBES_order = Order(
                Product.DJEMBES, DJEMBES_price, quantity * BASKET_WEIGHTS[Product.DJEMBES]
            )

            # Add the component orders to the respective lists
            component_orders[Product.JAMS].append(JAMS_order)
            component_orders[Product.CROISSANTS].append(CROISSANTS_order)
            component_orders[Product.DJEMBES].append(DJEMBES_order)

        return component_orders

    def execute_spread_orders(
        self,
        target_position: int,
        basket_position: int,
        order_depths: Dict[str, OrderDepth],
    ):

        if target_position == basket_position:
            return None

        target_quantity = abs(target_position - basket_position)
        basket_order_depth = order_depths[Product.GIFT_BASKET]
        synthetic_order_depth = self.get_synthetic_basket_order_depth(order_depths)

        if target_position > basket_position:
            basket_ask_price = min(basket_order_depth.sell_orders.keys())
            basket_ask_volume = abs(basket_order_depth.sell_orders[basket_ask_price])

            synthetic_bid_price = max(synthetic_order_depth.buy_orders.keys())
            synthetic_bid_volume = abs(
                synthetic_order_depth.buy_orders[synthetic_bid_price]
            )

            orderbook_volume = min(basket_ask_volume, synthetic_bid_volume)
            execute_volume = min(orderbook_volume, target_quantity)

            basket_orders = [
                Order(Product.GIFT_BASKET, basket_ask_price, execute_volume)
            ]
            synthetic_orders = [
                Order(Product.SYNTHETIC, synthetic_bid_price, -execute_volume)
            ]

            aggregate_orders = self.convert_synthetic_basket_orders(
                synthetic_orders, order_depths
            )
            aggregate_orders[Product.GIFT_BASKET] = basket_orders
            return aggregate_orders

        else:
            basket_bid_price = max(basket_order_depth.buy_orders.keys())
            basket_bid_volume = abs(basket_order_depth.buy_orders[basket_bid_price])

            synthetic_ask_price = min(synthetic_order_depth.sell_orders.keys())
            synthetic_ask_volume = abs(
                synthetic_order_depth.sell_orders[synthetic_ask_price]
            )

            orderbook_volume = min(basket_bid_volume, synthetic_ask_volume)
            execute_volume = min(orderbook_volume, target_quantity)

            basket_orders = [
                Order(Product.GIFT_BASKET, basket_bid_price, -execute_volume)
            ]
            synthetic_orders = [
                Order(Product.SYNTHETIC, synthetic_ask_price, execute_volume)
            ]

            aggregate_orders = self.convert_synthetic_basket_orders(
                synthetic_orders, order_depths
            )
            aggregate_orders[Product.GIFT_BASKET] = basket_orders
            return aggregate_orders

    def spread_orders(
        self,
        order_depths: Dict[str, OrderDepth],
        product: Product,
        basket_position: int,
        spread_data: Dict[str, Any],
    ):
        if Product.GIFT_BASKET not in order_depths.keys():
            return None

        basket_order_depth = order_depths[Product.GIFT_BASKET]
        synthetic_order_depth = self.get_synthetic_basket_order_depth(order_depths)
        basket_swmid = self.get_swmid(basket_order_depth)
        synthetic_swmid = self.get_swmid(synthetic_order_depth)
        spread = basket_swmid - synthetic_swmid
        spread_data["spread_history"].append(spread)

        if (
            len(spread_data["spread_history"])
            < self.params[Product.SPREAD]["spread_std_window"]
        ):
            return None
        elif (
            len(spread_data["spread_history"])
            > self.params[Product.SPREAD]["spread_std_window"]
        ):
            spread_data["spread_history"].pop(0)

        spread_std = np.std(spread_data["spread_history"])

        zscore = (
            spread - self.params[Product.SPREAD]["default_spread_mean"]
        ) / spread_std

        if zscore >= self.params[Product.SPREAD]["zscore_threshold"]:
            if basket_position != -self.params[Product.SPREAD]["target_position"]:
                return self.execute_spread_orders(
                    -self.params[Product.SPREAD]["target_position"],
                    basket_position,
                    order_depths,
                )

        if zscore <= -self.params[Product.SPREAD]["zscore_threshold"]:
            if basket_position != self.params[Product.SPREAD]["target_position"]:
                return self.execute_spread_orders(
                    self.params[Product.SPREAD]["target_position"],
                    basket_position,
                    order_depths,
                )

        spread_data["prev_zscore"] = zscore
        return None

    def get_VOLCANIC_ROCK_coupon_mid_price(
        self, VOLCANIC_ROCK_coupon_order_depth: OrderDepth, traderData: Dict[str, Any]
    ):
        if (
            len(VOLCANIC_ROCK_coupon_order_depth.buy_orders) > 0
            and len(VOLCANIC_ROCK_coupon_order_depth.sell_orders) > 0
        ):
            best_bid = max(VOLCANIC_ROCK_coupon_order_depth.buy_orders.keys())
            best_ask = min(VOLCANIC_ROCK_coupon_order_depth.sell_orders.keys())
            traderData["prev_coupon_price"] = (best_bid + best_ask) / 2
            return (best_bid + best_ask) / 2
        else:
            return traderData["prev_coupon_price"]

    def delta_hedge_VOLCANIC_ROCK_position(
        self,
        VOLCANIC_ROCK_order_depth: OrderDepth,
        VOLCANIC_ROCK_coupon_position: int,
        VOLCANIC_ROCK_position: int,
        VOLCANIC_ROCK_buy_orders: int,
        VOLCANIC_ROCK_sell_orders: int,
        delta: float,
    ) -> List[Order]:
        """
        Delta hedge the overall position in VOLCANIC_ROCK_COUPON by creating orders in VOLCANIC_ROCK.

        Args:
            VOLCANIC_ROCK_order_depth (OrderDepth): The order depth for the VOLCANIC_ROCK product.
            VOLCANIC_ROCK_coupon_position (int): The current position in VOLCANIC_ROCK_COUPON.
            VOLCANIC_ROCK_position (int): The current position in VOLCANIC_ROCK.
            VOLCANIC_ROCK_buy_orders (int): The total quantity of buy orders for VOLCANIC_ROCK in the current iteration.
            VOLCANIC_ROCK_sell_orders (int): The total quantity of sell orders for VOLCANIC_ROCK in the current iteration.
            delta (float): The current value of delta for the VOLCANIC_ROCK_COUPON product.
            traderData (Dict[str, Any]): The trader data for the VOLCANIC_ROCK_COUPON product.

        Returns:
            List[Order]: A list of orders to delta hedge the VOLCANIC_ROCK_COUPON position.
        """

        target_VOLCANIC_ROCK_position = -int(delta * VOLCANIC_ROCK_coupon_position)
        hedge_quantity = target_VOLCANIC_ROCK_position - (
            VOLCANIC_ROCK_position + VOLCANIC_ROCK_buy_orders - VOLCANIC_ROCK_sell_orders
        )

        orders: List[Order] = []
        if hedge_quantity > 0:
            # Buy VOLCANIC_ROCK
            best_ask = min(VOLCANIC_ROCK_order_depth.sell_orders.keys())
            quantity = min(
                abs(hedge_quantity), -VOLCANIC_ROCK_order_depth.sell_orders[best_ask]
            )
            quantity = min(
                quantity,
                self.LIMIT[Product.VOLCANIC_ROCK] - (VOLCANIC_ROCK_position + VOLCANIC_ROCK_buy_orders),
            )
            if quantity > 0:
                orders.append(Order(Product.VOLCANIC_ROCK, best_ask, quantity))
        elif hedge_quantity < 0:
            # Sell VOLCANIC_ROCK
            best_bid = max(VOLCANIC_ROCK_order_depth.buy_orders.keys())
            quantity = min(
                abs(hedge_quantity), VOLCANIC_ROCK_order_depth.buy_orders[best_bid]
            )
            quantity = min(
                quantity,
                self.LIMIT[Product.VOLCANIC_ROCK] + (VOLCANIC_ROCK_position - VOLCANIC_ROCK_sell_orders),
            )
            if quantity > 0:
                orders.append(Order(Product.VOLCANIC_ROCK, best_bid, -quantity))

        return orders

    def delta_hedge_VOLCANIC_ROCK_coupon_orders(
        self,
        VOLCANIC_ROCK_order_depth: OrderDepth,
        VOLCANIC_ROCK_coupon_orders: List[Order],
        VOLCANIC_ROCK_position: int,
        VOLCANIC_ROCK_buy_orders: int,
        VOLCANIC_ROCK_sell_orders: int,
        delta: float,
    ) -> List[Order]:
        """
        Delta hedge the new orders for VOLCANIC_ROCK_COUPON by creating orders in VOLCANIC_ROCK.

        Args:
            VOLCANIC_ROCK_order_depth (OrderDepth): The order depth for the VOLCANIC_ROCK product.
            VOLCANIC_ROCK_coupon_orders (List[Order]): The new orders for VOLCANIC_ROCK_COUPON.
            VOLCANIC_ROCK_position (int): The current position in VOLCANIC_ROCK.
            VOLCANIC_ROCK_buy_orders (int): The total quantity of buy orders for VOLCANIC_ROCK in the current iteration.
            VOLCANIC_ROCK_sell_orders (int): The total quantity of sell orders for VOLCANIC_ROCK in the current iteration.
            delta (float): The current value of delta for the VOLCANIC_ROCK_COUPON product.

        Returns:
            List[Order]: A list of orders to delta hedge the new VOLCANIC_ROCK_COUPON orders.
        """
        if len(VOLCANIC_ROCK_coupon_orders) == 0:
            return None

        net_VOLCANIC_ROCK_coupon_quantity = sum(
            order.quantity for order in VOLCANIC_ROCK_coupon_orders
        )
        target_VOLCANIC_ROCK_quantity = -int(delta * net_VOLCANIC_ROCK_coupon_quantity)

        orders: List[Order] = []
        if target_VOLCANIC_ROCK_quantity > 0:
            # Buy VOLCANIC_ROCK
            best_ask = min(VOLCANIC_ROCK_order_depth.sell_orders.keys())
            quantity = min(
                abs(target_VOLCANIC_ROCK_quantity), -VOLCANIC_ROCK_order_depth.sell_orders[best_ask]
            )
            quantity = min(
                quantity,
                self.LIMIT[Product.VOLCANIC_ROCK] - (VOLCANIC_ROCK_position + VOLCANIC_ROCK_buy_orders),
            )
            if quantity > 0:
                orders.append(Order(Product.VOLCANIC_ROCK, best_ask, quantity))
        elif target_VOLCANIC_ROCK_quantity < 0:
            # Sell VOLCANIC_ROCK
            best_bid = max(VOLCANIC_ROCK_order_depth.buy_orders.keys())
            quantity = min(
                abs(target_VOLCANIC_ROCK_quantity), VOLCANIC_ROCK_order_depth.buy_orders[best_bid]
            )
            quantity = min(
                quantity,
                self.LIMIT[Product.VOLCANIC_ROCK] + (VOLCANIC_ROCK_position - VOLCANIC_ROCK_sell_orders),
            )
            if quantity > 0:
                orders.append(Order(Product.VOLCANIC_ROCK, best_bid, -quantity))

        return orders

    def VOLCANIC_ROCK_hedge_orders(
        self,
        VOLCANIC_ROCK_order_depth: OrderDepth,
        VOLCANIC_ROCK_coupon_order_depth: OrderDepth,
        VOLCANIC_ROCK_coupon_orders: List[Order],
        VOLCANIC_ROCK_position: int,
        VOLCANIC_ROCK_coupon_position: int,
        delta: float,
    ) -> List[Order]:
        if VOLCANIC_ROCK_coupon_orders == None or len(VOLCANIC_ROCK_coupon_orders) == 0:
            VOLCANIC_ROCK_coupon_position_after_trade = VOLCANIC_ROCK_coupon_position
        else:
            VOLCANIC_ROCK_coupon_position_after_trade = VOLCANIC_ROCK_coupon_position + sum(
                order.quantity for order in VOLCANIC_ROCK_coupon_orders
            )

        target_VOLCANIC_ROCK_position = -delta * VOLCANIC_ROCK_coupon_position_after_trade

        if target_VOLCANIC_ROCK_position == VOLCANIC_ROCK_position:
            return None

        target_VOLCANIC_ROCK_quantity = target_VOLCANIC_ROCK_position - VOLCANIC_ROCK_position

        orders: List[Order] = []
        if target_VOLCANIC_ROCK_quantity > 0:
            # Buy VOLCANIC_ROCK
            best_ask = min(VOLCANIC_ROCK_order_depth.sell_orders.keys())
            quantity = min(
                abs(target_VOLCANIC_ROCK_quantity),
                self.LIMIT[Product.VOLCANIC_ROCK] - VOLCANIC_ROCK_position,
            )
            if quantity > 0:
                orders.append(Order(Product.VOLCANIC_ROCK, best_ask, round(quantity)))

        elif target_VOLCANIC_ROCK_quantity < 0:
            # Sell VOLCANIC_ROCK
            best_bid = max(VOLCANIC_ROCK_order_depth.buy_orders.keys())
            quantity = min(
                abs(target_VOLCANIC_ROCK_quantity),
                self.LIMIT[Product.VOLCANIC_ROCK] + VOLCANIC_ROCK_position,
            )
            if quantity > 0:
                orders.append(Order(Product.VOLCANIC_ROCK, best_bid, -round(quantity)))

        return orders

    def VOLCANIC_ROCK_coupon_orders(
        self,
        VOLCANIC_ROCK_coupon_order_depth: OrderDepth,
        VOLCANIC_ROCK_coupon_position: int,
        traderData: Dict[str, Any],
        volatility: float,
    ) -> List[Order]:
        traderData["past_coupon_vol"].append(volatility)
        if (
            len(traderData["past_coupon_vol"])
            < self.params[Product.VOLCANIC_ROCK_COUPON]["std_window"]
        ):
            return None, None

        if (
            len(traderData["past_coupon_vol"])
            > self.params[Product.VOLCANIC_ROCK_COUPON]["std_window"]
        ):
            traderData["past_coupon_vol"].pop(0)

        vol_z_score = (
            volatility - self.params[Product.VOLCANIC_ROCK_COUPON]["mean_volatility"]
        ) / np.std(traderData["past_coupon_vol"])
        # print(f"vol_z_score: {vol_z_score}")
        # print(f"zscore_threshold: {self.params[Product.VOLCANIC_ROCK_COUPON]['zscore_threshold']}")
        if vol_z_score >= self.params[Product.VOLCANIC_ROCK_COUPON]["zscore_threshold"]:
            if VOLCANIC_ROCK_coupon_position != -self.LIMIT[Product.VOLCANIC_ROCK_COUPON]:
                target_VOLCANIC_ROCK_coupon_position = -self.LIMIT[Product.VOLCANIC_ROCK_COUPON]
                if len(VOLCANIC_ROCK_coupon_order_depth.buy_orders) > 0:
                    best_bid = max(VOLCANIC_ROCK_coupon_order_depth.buy_orders.keys())
                    target_quantity = abs(
                        target_VOLCANIC_ROCK_coupon_position - VOLCANIC_ROCK_coupon_position
                    )
                    quantity = min(
                        target_quantity,
                        abs(VOLCANIC_ROCK_coupon_order_depth.buy_orders[best_bid]),
                    )
                    quote_quantity = target_quantity - quantity
                    if quote_quantity == 0:
                        return [Order(Product.VOLCANIC_ROCK_COUPON, best_bid, -quantity)], []
                    else:
                        return [Order(Product.VOLCANIC_ROCK_COUPON, best_bid, -quantity)], [
                            Order(Product.VOLCANIC_ROCK_COUPON, best_bid, -quote_quantity)
                        ]

        elif vol_z_score <= -self.params[Product.VOLCANIC_ROCK_COUPON]["zscore_threshold"]:
            if VOLCANIC_ROCK_coupon_position != self.LIMIT[Product.VOLCANIC_ROCK_COUPON]:
                target_VOLCANIC_ROCK_coupon_position = self.LIMIT[Product.VOLCANIC_ROCK_COUPON]
                if len(VOLCANIC_ROCK_coupon_order_depth.sell_orders) > 0:
                    best_ask = min(VOLCANIC_ROCK_coupon_order_depth.sell_orders.keys())
                    target_quantity = abs(
                        target_VOLCANIC_ROCK_coupon_position - VOLCANIC_ROCK_coupon_position
                    )
                    quantity = min(
                        target_quantity,
                        abs(VOLCANIC_ROCK_coupon_order_depth.sell_orders[best_ask]),
                    )
                    quote_quantity = target_quantity - quantity
                    if quote_quantity == 0:
                        return [Order(Product.VOLCANIC_ROCK_COUPON, best_ask, quantity)], []
                    else:
                        return [Order(Product.VOLCANIC_ROCK_COUPON, best_ask, quantity)], [
                            Order(Product.VOLCANIC_ROCK_COUPON, best_ask, quote_quantity)
                        ]

        return None, None

    def get_past_returns(
        self,
        traderObject: Dict[str, Any],
        order_depths: Dict[str, OrderDepth],
        timeframes: Dict[str, int],
    ):
        returns_dict = {}

        for symbol, timeframe in timeframes.items():
            traderObject_key = f"{symbol}_price_history"
            if traderObject_key not in traderObject:
                traderObject[traderObject_key] = []

            price_history = traderObject[traderObject_key]

            if symbol in order_depths:
                order_depth = order_depths[symbol]
                if len(order_depth.buy_orders) > 0 and len(order_depth.sell_orders) > 0:
                    current_price = (
                        max(order_depth.buy_orders.keys())
                        + min(order_depth.sell_orders.keys())
                    ) / 2
                else:
                    if len(price_history) > 0:
                        current_price = float(price_history[-1])
                    else:
                        returns_dict[symbol] = None
                        continue
            else:
                if len(price_history) > 0:
                    current_price = float(price_history[-1])
                else:
                    returns_dict[symbol] = None
                    continue

            price_history.append(
                f"{current_price:.1f}"
            )  # Convert float to string with 1 decimal place

            if len(price_history) > timeframe:
                price_history.pop(0)

            if len(price_history) == timeframe:
                past_price = float(price_history[0])  # Convert string back to float
                returns = (current_price - past_price) / past_price
                returns_dict[symbol] = returns
            else:
                returns_dict[symbol] = None

        return returns_dict

    def run(self, state: TradingState):
        traderObject = {}

        if state.traderData != None and state.traderData != "":
            traderObject = jsonpickle.decode(state.traderData)

        past_returns_timeframes = {"GIFT_BASKET": 500}
        past_returns_dict = self.get_past_returns(
            traderObject, state.order_depths, past_returns_timeframes
        )

        result = {}
        conversions = 0


        if Product.MACARONS in self.params and Product.MACARONS in state.order_depths:
            if Product.MACARONS not in traderObject:
                traderObject[Product.MACARONS] = {
                    "curr_edge": self.params[Product.MACARONS]["init_make_edge"],
                    "volume_history": [],
                    "optimized": False
                }
            macarons_position = (
                state.position[Product.MACARONS]
                if Product.MACARONS in state.position
                else 0
            )

            conversions = self.macarons_arb_clear(macarons_position)

            adap_edge = self.macarons_adap_edge(
                state.timestamp,
                traderObject[Product.MACARONS]["curr_edge"],
                macarons_position,
                traderObject
            )

            macarons_position = 0  # Reset position after conversions

            macarons_take_orders, buy_order_volume, sell_order_volume = self.macarons_arb_take(
                state.order_depths[Product.MACARONS],
                state.observations.conversionObservations[Product.MACARONS],
                adap_edge,
                macarons_position
            )

            macarons_make_orders, _, _ = self.macarons_arb_make(
                state.order_depths[Product.MACARONS],
                state.observations.conversionObservations[Product.MACARONS],
                macarons_position,
                adap_edge,
                buy_order_volume,
                sell_order_volume
            )

            result[Product.MACARONS] = macarons_take_orders + macarons_make_orders


        # Handle CROISSANTS with sinc-based mean reversion strategy
        if Product.CROISSANTS in self.params and Product.CROISSANTS in state.order_depths:
            croissants_position = (
                state.position[Product.CROISSANTS]
                if Product.CROISSANTS in state.position
                else 0
            )
            croissants_fair_value = self.sinc_fair_value(
                Product.CROISSANTS, state.order_depths[Product.CROISSANTS], traderObject
            )
            croissants_orders = self.sinc_mean_reversion_strategy(
                Product.CROISSANTS,
                state.order_depths[Product.CROISSANTS],
                traderObject,
                croissants_position,
            )
            result[Product.CROISSANTS] = croissants_orders

        # Handle JAMS with the same sinc-based mean reversion strategy
        if Product.JAMS in self.params and Product.JAMS in state.order_depths:
            jams_position = (
                state.position[Product.JAMS]
                if Product.JAMS in state.position
                else 0
            )
            jams_fair_value = self.sinc_fair_value(
                Product.JAMS, state.order_depths[Product.JAMS], traderObject
            )
            jams_orders = self.sinc_mean_reversion_strategy(
                Product.JAMS,
                state.order_depths[Product.JAMS],
                traderObject,
                jams_position,
            )
            result[Product.JAMS] = jams_orders



        if Product.RAINFOREST_RESIN in self.params and Product.RAINFOREST_RESIN in state.order_depths:
            amethyst_position = (
                state.position[Product.RAINFOREST_RESIN]
                if Product.RAINFOREST_RESIN in state.position
                else 0
            )
            amethyst_take_orders, buy_order_volume, sell_order_volume = (
                self.take_orders(
                    Product.RAINFOREST_RESIN,
                    state.order_depths[Product.RAINFOREST_RESIN],
                    self.params[Product.RAINFOREST_RESIN]["fair_value"],
                    self.params[Product.RAINFOREST_RESIN]["take_width"],
                    amethyst_position,
                )
            )
            amethyst_clear_orders, buy_order_volume, sell_order_volume = (
                self.clear_orders(
                    Product.RAINFOREST_RESIN,
                    state.order_depths[Product.RAINFOREST_RESIN],
                    self.params[Product.RAINFOREST_RESIN]["fair_value"],
                    self.params[Product.RAINFOREST_RESIN]["clear_width"],
                    amethyst_position,
                    buy_order_volume,
                    sell_order_volume,
                )
            )
            amethyst_make_orders, _, _ = self.make_amethyst_orders(
                state.order_depths[Product.RAINFOREST_RESIN],
                self.params[Product.RAINFOREST_RESIN]["fair_value"],
                amethyst_position,
                buy_order_volume,
                sell_order_volume,
                self.params[Product.RAINFOREST_RESIN]["volume_limit"],
            )
            result[Product.RAINFOREST_RESIN] = (
                amethyst_take_orders + amethyst_clear_orders + amethyst_make_orders
            )

        if Product.SQUID_INK in self.params and Product.SQUID_INK in state.order_depths:
            squid_position = (
                state.position[Product.SQUID_INK]
                if Product.SQUID_INK in state.position
                else 0
            )
            squid_take_orders, buy_order_volume, sell_order_volume = (
                self.take_orders(
                    Product.SQUID_INK,
                    state.order_depths[Product.SQUID_INK],
                    self.params[Product.SQUID_INK]["fair_value"],
                    self.params[Product.SQUID_INK]["take_width"],
                    squid_position,
                )
            )
            squid_clear_orders, buy_order_volume, sell_order_volume = (
                self.clear_orders(
                    Product.SQUID_INK,
                    state.order_depths[Product.SQUID_INK],
                    self.params[Product.SQUID_INK]["fair_value"],
                    self.params[Product.SQUID_INK]["clear_width"],
                    squid_position,
                    buy_order_volume,
                    sell_order_volume,
                )
            )
            squid_make_orders, _, _ = self.make_squid_orders(
                state.order_depths[Product.SQUID_INK],
                self.params[Product.SQUID_INK]["fair_value"],
                squid_position,
                buy_order_volume,
                sell_order_volume,
                self.params[Product.SQUID_INK]["volume_limit"],
            )
            result[Product.SQUID_INK] = (
                squid_take_orders + squid_clear_orders + squid_make_orders
            )

        if Product.KELP in self.params and Product.KELP in state.order_depths:
            KELP_position = (
                state.position[Product.KELP]
                if Product.KELP in state.position
                else 0
            )
            KELP_fair_value = self.KELP_fair_value(
                state.order_depths[Product.KELP], traderObject
            )
            KELP_take_orders, buy_order_volume, sell_order_volume = (
                self.take_orders(
                    Product.KELP,
                    state.order_depths[Product.KELP],
                    KELP_fair_value,
                    self.params[Product.KELP]["take_width"],
                    KELP_position,
                    self.params[Product.KELP]["prevent_adverse"],
                    self.params[Product.KELP]["adverse_volume"],
                )
            )
            KELP_clear_orders, buy_order_volume, sell_order_volume = (
                self.clear_orders(
                    Product.KELP,
                    state.order_depths[Product.KELP],
                    KELP_fair_value,
                    self.params[Product.KELP]["clear_width"],
                    KELP_position,
                    buy_order_volume,
                    sell_order_volume,
                )
            )
            KELP_make_orders, _, _ = self.make_KELP_orders(
                state.order_depths[Product.KELP],
                KELP_fair_value,
                self.params[Product.KELP]["KELP_min_edge"],
                KELP_position,
                buy_order_volume,
                sell_order_volume,
            )
            result[Product.KELP] = (
                KELP_take_orders + KELP_clear_orders + KELP_make_orders
            )

        if Product.SPREAD not in traderObject:
            traderObject[Product.SPREAD] = {
                "spread_history": [],
                "prev_zscore": 0,
                "clear_flag": False,
                "curr_avg": 0,
            }

        basket_position = (
            state.position[Product.GIFT_BASKET]
            if Product.GIFT_BASKET in state.position
            else 0
        )
        spread_orders = self.spread_orders(
            state.order_depths,
            Product.GIFT_BASKET,
            basket_position,
            traderObject[Product.SPREAD],
        )

        if spread_orders != None:
            #result[Product.JAMS] = spread_orders[Product.JAMS]
            #result[Product.CROISSANTS] = spread_orders[Product.CROISSANTS]
            #result[Product.DJEMBES] = spread_orders[Product.DJEMBES]
            result[Product.GIFT_BASKET] = spread_orders[Product.GIFT_BASKET]


        traderData = jsonpickle.encode(traderObject)

        return result, conversions, traderData